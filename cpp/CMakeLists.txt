# Copyright (c) 2023 Boston Dynamics, Inc.  All rights reserved.
#
# Downloading, reproducing, distributing or otherwise using the SDK Software
# is subject to the terms and conditions of the Boston Dynamics Software
# Development Kit License (20191101-BDSDK-SL).

# This file is autogenerated.

cmake_minimum_required (VERSION 3.10.2)
project (bosdyn)

set(CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} -fPIC")

# Dependencies:
find_package(protobuf REQUIRED)
find_package(Eigen3 REQUIRED)
find_package(gRPC REQUIRED)
find_package(CLI11 REQUIRED)
find_package(Threads REQUIRED)
include_directories(SYSTEM $<TARGET_PROPERTY:gRPC::grpc++,INTERFACE_INCLUDE_DIRECTORIES>)
get_target_property(grpc_cpp_plugin_location gRPC::grpc_cpp_plugin LOCATION)
include_directories(SYSTEM $<TARGET_PROPERTY:CLI11::CLI11,INTERFACE_INCLUDE_DIRECTORIES>)

# Command-line arguments:
set(CMAKE_BUILD_TYPE "Release" CACHE STRING "Choose the type of build." FORCE)
option(BUILD_SHARED_LIBS "Build using shared libraries" ON)
option(BUILD_CHOREOGRAPHY_LIBS "Boolean to control whether choreography proto libraries are built" OFF)

IF (NOT UNIX)
    SET(BUILD_SHARED_LIBS OFF CACHE BOOL "Build using shared libraries" FORCE)
ENDIF (NOT UNIX)


### API protos LIBRARY ###
set(API_protos_PATH ${CMAKE_CURRENT_SOURCE_DIR}/build/protos/)
# Copy protos folders to build folder so they are in a subdirectory from the cpp folder (necessary for the proto cpp files generation).
file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/../protos/ DESTINATION ${API_protos_PATH})
set(protos_OUTPUT_DIR ${CMAKE_CURRENT_BINARY_DIR}/protos)
file(GLOB_RECURSE bosdyn_protos_files CONFIGURE_DEPENDS
    RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} "${API_protos_PATH}/*.proto")

if (BUILD_SHARED_LIBS)
  add_library(bosdyn_api ${bosdyn_protos_files})
  set_target_properties(bosdyn_api PROPERTIES LIBRARY_OUTPUT_DIRECTORY ${protos_OUTPUT_DIR})
  target_link_libraries(bosdyn_api PUBLIC ${PROTOBUF_LIBRARIES} gRPC::grpc gRPC::grpc++)
  target_include_directories(bosdyn_api PUBLIC
    ${PROTOBUF_INCLUDE_DIRS}
    ${protos_OUTPUT_DIR}
  )
  protobuf_generate(TARGET bosdyn_api LANGUAGE cpp
    IMPORT_DIRS ${API_protos_PATH} 
    PROTOC_OUT_DIR ${protos_OUTPUT_DIR})
  protobuf_generate(TARGET bosdyn_api
    LANGUAGE grpc GENERATE_EXTENSIONS .grpc.pb.h .grpc.pb.cc
    PLUGIN "protoc-gen-grpc=${grpc_cpp_plugin_location}"
    IMPORT_DIRS ${API_protos_PATH} 
    PROTOC_OUT_DIR ${protos_OUTPUT_DIR}
  )
  install(TARGETS bosdyn_api DESTINATION lib/)
endif()

add_library(bosdyn_api_static STATIC ${bosdyn_protos_files})
set_target_properties(bosdyn_api_static PROPERTIES LIBRARY_OUTPUT_DIRECTORY ${protos_OUTPUT_DIR})
target_link_libraries(bosdyn_api_static PUBLIC ${PROTOBUF_LIBRARIES} gRPC::grpc gRPC::grpc++)
target_include_directories(bosdyn_api_static PUBLIC
  ${PROTOBUF_INCLUDE_DIRS}
  ${protos_OUTPUT_DIR}
)
get_target_property(grpc_cpp_plugin_location gRPC::grpc_cpp_plugin LOCATION)
protobuf_generate(TARGET bosdyn_api_static LANGUAGE cpp
  IMPORT_DIRS ${API_protos_PATH} 
  PROTOC_OUT_DIR ${protos_OUTPUT_DIR})
protobuf_generate(TARGET bosdyn_api_static
  LANGUAGE grpc GENERATE_EXTENSIONS .grpc.pb.h .grpc.pb.cc
  PLUGIN "protoc-gen-grpc=${grpc_cpp_plugin_location}"
  IMPORT_DIRS ${API_protos_PATH} 
  PROTOC_OUT_DIR ${protos_OUTPUT_DIR}
)
install(TARGETS bosdyn_api_static DESTINATION lib/)
install(DIRECTORY ${protos_OUTPUT_DIR}/bosdyn
  DESTINATION include
  FILES_MATCHING PATTERN "*.h"
)
if (BUILD_CHOREOGRAPHY_LIBS)

### API choreography_protos LIBRARY ###
set(API_choreography_protos_PATH ${CMAKE_CURRENT_SOURCE_DIR}/build/choreography_protos/)
# Copy choreography_protos folders to build folder so they are in a subdirectory from the cpp folder (necessary for the proto cpp files generation).
file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/../choreography_protos/ DESTINATION ${API_choreography_protos_PATH})
set(choreography_protos_OUTPUT_DIR ${CMAKE_CURRENT_BINARY_DIR}/choreography_protos)
file(GLOB_RECURSE bosdyn_choreography_protos_files CONFIGURE_DEPENDS
    RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} "${API_choreography_protos_PATH}/*.proto")

if (BUILD_SHARED_LIBS)
  add_library(bosdyn_choreography_protos ${bosdyn_choreography_protos_files})
  set_target_properties(bosdyn_choreography_protos PROPERTIES LIBRARY_OUTPUT_DIRECTORY ${choreography_protos_OUTPUT_DIR})
  target_link_libraries(bosdyn_choreography_protos PUBLIC bosdyn_api)
  target_include_directories(bosdyn_choreography_protos PUBLIC
    ${PROTOBUF_INCLUDE_DIRS}
    ${protos_OUTPUT_DIR}
    ${choreography_protos_OUTPUT_DIR}
  )
  protobuf_generate(TARGET bosdyn_choreography_protos LANGUAGE cpp
    IMPORT_DIRS ${API_choreography_protos_PATH} ${API_protos_PATH}
    PROTOC_OUT_DIR ${choreography_protos_OUTPUT_DIR})
  protobuf_generate(TARGET bosdyn_choreography_protos
    LANGUAGE grpc GENERATE_EXTENSIONS .grpc.pb.h .grpc.pb.cc
    PLUGIN "protoc-gen-grpc=${grpc_cpp_plugin_location}"
    IMPORT_DIRS ${API_choreography_protos_PATH} ${API_protos_PATH}
    PROTOC_OUT_DIR ${choreography_protos_OUTPUT_DIR}
  )
  install(TARGETS bosdyn_choreography_protos DESTINATION lib/)
endif()

add_library(bosdyn_choreography_protos_static STATIC ${bosdyn_choreography_protos_files})
set_target_properties(bosdyn_choreography_protos_static PROPERTIES LIBRARY_OUTPUT_DIRECTORY ${choreography_protos_OUTPUT_DIR})
target_link_libraries(bosdyn_choreography_protos_static PUBLIC bosdyn_api)
target_include_directories(bosdyn_choreography_protos_static PUBLIC
  ${PROTOBUF_INCLUDE_DIRS}
  ${protos_OUTPUT_DIR}
  ${choreography_protos_OUTPUT_DIR}
)
get_target_property(grpc_cpp_plugin_location gRPC::grpc_cpp_plugin LOCATION)
protobuf_generate(TARGET bosdyn_choreography_protos_static LANGUAGE cpp
  IMPORT_DIRS ${API_choreography_protos_PATH} ${API_protos_PATH}
  PROTOC_OUT_DIR ${choreography_protos_OUTPUT_DIR})
protobuf_generate(TARGET bosdyn_choreography_protos_static
  LANGUAGE grpc GENERATE_EXTENSIONS .grpc.pb.h .grpc.pb.cc
  PLUGIN "protoc-gen-grpc=${grpc_cpp_plugin_location}"
  IMPORT_DIRS ${API_choreography_protos_PATH} ${API_protos_PATH}
  PROTOC_OUT_DIR ${choreography_protos_OUTPUT_DIR}
)
install(TARGETS bosdyn_choreography_protos_static DESTINATION lib/)
install(DIRECTORY ${choreography_protos_OUTPUT_DIR}/bosdyn
  DESTINATION include/api/choreography_protos/
  FILES_MATCHING PATTERN "*.h"
)
endif()


### CLIENT LIBRARY ###
file(GLOB_RECURSE bosdyn_client_SRC CONFIGURE_DEPENDS "${CMAKE_CURRENT_SOURCE_DIR}/bosdyn/*")
if (BUILD_SHARED_LIBS)
  add_library (bosdyn_client SHARED ${bosdyn_client_SRC})
  target_compile_features(bosdyn_client PUBLIC cxx_std_14)
  target_include_directories (bosdyn_client PUBLIC
    ${CMAKE_CURRENT_SOURCE_DIR}
    ${PROTOBUF_INCLUDE_DIR}
    ${EIGEN3_INCLUDE_DIR})
  target_link_libraries(bosdyn_client PUBLIC bosdyn_api)
  install(TARGETS bosdyn_client DESTINATION lib/)
endif()

add_library (bosdyn_client_static STATIC ${bosdyn_client_SRC})
target_compile_features(bosdyn_client_static PUBLIC cxx_std_14)
target_include_directories (bosdyn_client_static PUBLIC
  ${CMAKE_CURRENT_SOURCE_DIR}
  ${PROTOBUF_INCLUDE_DIR}
  ${EIGEN3_INCLUDE_DIR})
target_link_libraries(bosdyn_client_static PUBLIC bosdyn_api_static)
install(TARGETS bosdyn_client_static DESTINATION lib/)

install(DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/bosdyn" DESTINATION include FILES_MATCHING PATTERN "*.h")


### EXAMPLE EXECUTABLES ###
link_directories(
  ${PROTOBUF_LIB_DIR}
)
add_executable(arm_grasp_carry_overrides ${CMAKE_CURRENT_SOURCE_DIR}/examples/arm_grasp_carry_overrides/arm_grasp_carry_overrides.cpp)
target_compile_features(arm_grasp_carry_overrides PUBLIC cxx_std_14)
target_include_directories(arm_grasp_carry_overrides PUBLIC
  ${CMAKE_CURRENT_SOURCE_DIR}
  ${PROTOBUF_INCLUDE_DIR}
)
target_link_libraries(arm_grasp_carry_overrides PUBLIC bosdyn_client_static)
install(TARGETS arm_grasp_carry_overrides DESTINATION bin/)
add_executable(arm_manipulation_api_walk_to ${CMAKE_CURRENT_SOURCE_DIR}/examples/arm_manipulation_api_walk_to/arm_manipulation_api_walk_to.cpp)
target_compile_features(arm_manipulation_api_walk_to PUBLIC cxx_std_14)
target_include_directories(arm_manipulation_api_walk_to PUBLIC
  ${CMAKE_CURRENT_SOURCE_DIR}
  ${PROTOBUF_INCLUDE_DIR}
)
target_link_libraries(arm_manipulation_api_walk_to PUBLIC bosdyn_client_static)
install(TARGETS arm_manipulation_api_walk_to DESTINATION bin/)
add_executable(basic_robot_command ${CMAKE_CURRENT_SOURCE_DIR}/examples/basic_robot_command/basic_robot_command.cpp)
target_compile_features(basic_robot_command PUBLIC cxx_std_14)
target_include_directories(basic_robot_command PUBLIC
  ${CMAKE_CURRENT_SOURCE_DIR}
  ${PROTOBUF_INCLUDE_DIR}
)
target_link_libraries(basic_robot_command PUBLIC bosdyn_client_static)
install(TARGETS basic_robot_command DESTINATION bin/)
add_executable(get_image ${CMAKE_CURRENT_SOURCE_DIR}/examples/get_image/get_image.cpp)
target_compile_features(get_image PUBLIC cxx_std_14)
target_include_directories(get_image PUBLIC
  ${CMAKE_CURRENT_SOURCE_DIR}
  ${PROTOBUF_INCLUDE_DIR}
)
target_link_libraries(get_image PUBLIC bosdyn_client_static)
install(TARGETS get_image DESTINATION bin/)
add_executable(spot_cam ${CMAKE_CURRENT_SOURCE_DIR}/examples/spot_cam/ptz_example.cpp)
target_compile_features(spot_cam PUBLIC cxx_std_14)
target_include_directories(spot_cam PUBLIC
  ${CMAKE_CURRENT_SOURCE_DIR}
  ${PROTOBUF_INCLUDE_DIR}
)
target_link_libraries(spot_cam PUBLIC bosdyn_client_static)
install(TARGETS spot_cam DESTINATION bin/)
add_executable(hello_spot ${CMAKE_CURRENT_SOURCE_DIR}/examples/hello_spot/hello_spot.cpp)
target_compile_features(hello_spot PUBLIC cxx_std_14)
target_include_directories(hello_spot PUBLIC
  ${CMAKE_CURRENT_SOURCE_DIR}
  ${PROTOBUF_INCLUDE_DIR}
)
target_link_libraries(hello_spot PUBLIC bosdyn_client_static)
install(TARGETS hello_spot DESTINATION bin/)
add_executable(inverse_kinematics_reachability ${CMAKE_CURRENT_SOURCE_DIR}/examples/inverse_kinematics_reachability/inverse_kinematics_reachability.cpp)
target_compile_features(inverse_kinematics_reachability PUBLIC cxx_std_14)
target_include_directories(inverse_kinematics_reachability PUBLIC
  ${CMAKE_CURRENT_SOURCE_DIR}
  ${PROTOBUF_INCLUDE_DIR}
)
target_link_libraries(inverse_kinematics_reachability PUBLIC bosdyn_client_static)
install(TARGETS inverse_kinematics_reachability DESTINATION bin/)
